// author: Bocchiid edit date: 2025.02.24
// 描述: 所谓字符串匹配, 就是在主字符串(简称: 主串)中寻找是否存在完全匹配的子字符串(简称: 子串/模式串).

/*
例: str = "abcab", substring = "cab".
样例解释: 为了表述方便, 我们记两个字符串的起始下标为0, 即str[0]对应str的第一个字符'a', substring[0]对应substring的第一个字符'c'.
          观察可得str[2] == substring[0], str[3] == substring[1], str[4] == substring[2],
          substring中的所有字符都被匹配, 所以子串匹配成功.
*/

// solution 01(暴力匹配/字符串的朴素模式匹配算法)
// idea: 寻找所有可能的开始匹配位置, 并尝试匹配
bool strmatch(string str, string substring)
{
    int i, j;
    bool matches;

    for (i = 0; i < str.size(); i++)
    {
        if (str[i] == substring[0]) // 找到匹配子串的第一个字符, 然后开始尝试匹配
        {
            matches = true; // 假设匹配成功

            for (j = 1; j < substring.size(); j++)
            {
                if (str[i + j] != substring[j])
                {
                    matches = false; // 在尝试匹配过程中, 发现有不匹配的字符, 匹配失败, 并退出匹配
                    break;
                }
            }

            if (matches) // 尝试匹配结束后, 判断假设是否成立, 即匹配是否成功
            {
                return true;
            }
        }
    }

    return false;
}
// solution 02(kmp)
// idea: https://www.bilibili.com/video/BV18k4y1m7Ar?spm_id_from=333.788.player.switch&vd_source=0204160ae4f5fd893c1b26fb8c08e1e7&p=2
// author: tusroy refern-github: https://github.com/mission-peace/interview/blob/master/src/com/interview/string/SubstringSearch.java
bool kmp(string str, string substring)
{
    int i, j;
    int *lps = new int[substring.size()]; // 动态申请内存
    // create lps array
    lps[0] = 0;

    for (j = 0, i = 1; i < substring.size();)
    {
        if (substring[j] == substring[i])
        {
            lps[i] = j + 1;
            i++;
            j++;
        }
        else
        {
            if (j != 0)
            {
                j = lps[j - 1];
            }
            else
            {
                lps[i] = 0;
                i++;
            }
        }
    }
    // todo kmp
    for (i = 0, j = 0; i < str.size() && j < substring.size();)
    {
        if (str[i] == substring[j])
        {
            i++;
            j++;
        }
        else
        {
            if (j != 0)
            {
                j = lps[j - 1];
            }
            else
            {
                i++;
            }
        }
    }

    return j == substring.size();
}

// over
